/*
    Purpose:
    Author: Reece W.
    License: All Rights Reserved J. Reece Wilson (See License.txt)
*/

template<class T>
ODumbPointer<T>::ODumbPointer(T * object)
{
    _object			= object;
    _ref_counter	= new OReferenceCounter();
    _ref_counter->Reference();
}

template<class T>
ODumbPointer<T>::ODumbPointer()
{
    _object			= nullptr;
    _ref_counter	= nullptr;
}

template<class T>
ODumbPointer<T>::~ODumbPointer()
{
    if (_ref_counter == nullptr) return;
    Collect();
}

template<class T>
T* ODumbPointer<T>::operator->()
{
    return _object;
}

template<class T>
ODumbPointer<T>& ODumbPointer<T>::operator=(const ODumbPointer<T>& predecessor)
{
    return this->SwapValue(predecessor);
}

template<class T>
ODumbPointer<T>& ODumbPointer<T>::SwapValue(const ODumbPointer<T>& predecessor)
{
    if (this == &predecessor) return *this; //more c++ bullshit
    Collect();
    this->_ref_counter	= predecessor._ref_counter;
    this->_os_obj		= predecessor._os_obj;
    this->_object		= predecessor._object;
    this->_ref_counter->Reference();
    return *this;
}

class CPPIsAnnoying : public OObject
{
    void InvalidateImp() override
    {	}
};

template<class T>
T& ODumbPointer<T>::operator*()
{
    panic("You can not dereference an OS Object");
    return (T&)CPPIsAnnoying();
}

template<class T>
void ODumbPointer<T>::Collect()
{
    if (!_ref_counter)
        return;
    
    if (_ref_counter->Deference())
        return;
    
    _os_obj->Destory();
    delete _ref_counter;
}

template<class T>
bool ODumbPointer<T>::IsValid()
{ 
    return _object ? true : false;
}
    
template<class T>
void ODumbPointer<T>::IncrementUsage()
{
    _ref_counter->Reference();
}

template<class T>
void ODumbPointer<T>::DecrementUsage()
{
    Collect();
}
