/*
    Purpose:
    Author: Reece W.
    License: All Rights Reserved J. Reece Wilson (See License.txt)
*/

template<class T>
void * OOutlivableRef<T>::PassOwnership(void * obj) const
{
    return PassOwnership((T *)obj);
}

template<class T>
T * OOutlivableRef<T>::PassOwnership(T * obj) const
{
    bool found = false;
	if (!obj)
	{
		return nullptr;
	}
    if (this->_has_dumb)
    {
        this->_dumb_ptr.SwapValue(ODumbPointer<T>(obj));
        found = true;
    }
    if (this->_has_optr)
    {
        this->_optr.SetObject(obj, true);
        found = true;
    }
    if (this->_has_generic)
    {
        this->_generic_ptr = obj;
        found = true;
    }
    if (!found)
    {
        obj->Destroy();
    }
    return obj;
}
